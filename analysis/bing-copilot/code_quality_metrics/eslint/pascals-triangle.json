{
    "JavaScript": {
        "solution5": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution5.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    const result = new Array(numRows).fill().map((_, i) => {\n        const row = new Array(i + 1).fill(1);\n        for (let j = 1; j < i; j++) {\n            row[j] = result[i - 1][j - 1] + result[i - 1][j];\n        }\n        return row;\n    });\n    return result;\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution1": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution1.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    const result = [];\n    for (let i = 0; i < numRows; i++) {\n        const row = [];\n        for (let j = 0; j <= i; j++) {\n            if (j === 0 || j === i) {\n                row.push(1);\n            } else {\n                row.push(result[i - 1][j - 1] + result[i - 1][j]);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution4": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution4.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    const result = [];\n    for (let i = 0; i < numRows; i++) {\n        const row = [];\n        for (let j = 0; j <= i; j++) {\n            row.push(factorial(i) / (factorial(j) * factorial(i - j)));\n        }\n        result.push(row);\n    }\n    return result;\n};\n\nfunction factorial(n) {\n    if (n === 0 || n === 1) return 1;\n    return n * factorial(n - 1);\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution3": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution3.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    const memo = new Map();\n    function getRow(rowNum) {\n        if (rowNum === 0) return [1];\n        if (memo.has(rowNum)) return memo.get(rowNum);\n        const prevRow = getRow(rowNum - 1);\n        const newRow = [1];\n        for (let i = 1; i < prevRow.length; i++) {\n            newRow.push(prevRow[i - 1] + prevRow[i]);\n        }\n        newRow.push(1);\n        memo.set(rowNum, newRow);\n        return newRow;\n    }\n    const result = [];\n    for (let i = 0; i < numRows; i++) {\n        result.push(getRow(i));\n    }\n    return result;\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution6": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution6.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                },
                {
                    "ruleId": "no-undef",
                    "severity": 2,
                    "message": "'result' is not defined.",
                    "line": 5,
                    "column": 20,
                    "nodeType": "Identifier",
                    "messageId": "undef",
                    "endLine": 5,
                    "endColumn": 26
                },
                {
                    "ruleId": "no-undef",
                    "severity": 2,
                    "message": "'result' is not defined.",
                    "line": 5,
                    "column": 43,
                    "nodeType": "Identifier",
                    "messageId": "undef",
                    "endLine": 5,
                    "endColumn": 49
                }
            ],
            "suppressedMessages": [],
            "errorCount": 3,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    return Array.from({ length: numRows }, (_, i) => {\n        return Array.from({ length: i + 1 }, (_, j) => {\n            if (j === 0 || j === i) return 1;\n            return result[i - 1][j - 1] + result[i - 1][j];\n        });\n    });\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution2": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution2.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    if (numRows === 0) return [];\n    if (numRows === 1) return [[1]];\n    const prevRows = generate(numRows - 1);\n    const lastRow = prevRows[prevRows.length - 1];\n    const newRow = [1];\n    for (let i = 1; i < lastRow.length; i++) {\n        newRow.push(lastRow[i - 1] + lastRow[i]);\n    }\n    newRow.push(1);\n    return [...prevRows, newRow];\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution8": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/bing_copilot/parsed_outputs/pascals-triangle/JavaScript/solution8.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 1,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "var generate = function(numRows) {\n    const result = [];\n    for (let i = 0; i < numRows; i++) {\n        const row = [1, ...result[i - 1].map((val, j) => val + (result[i - 1][j + 1] || 0)), 1];\n        result.push(row);\n    }\n    return result;\n};\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        }
    }
}