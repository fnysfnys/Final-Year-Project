{
    "JavaScript": {
        "solution5": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution5.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows, triangle = [[1]]) {\n    if (numRows === 1) return triangle;\n    let prevRow = triangle[triangle.length - 1];\n    let newRow = [1];\n    for (let i = 1; i < prevRow.length; i++) {\n        newRow.push(prevRow[i] + prevRow[i - 1]);\n    }\n    newRow.push(1);\n    triangle.push(newRow);\n    return generate(numRows - 1, triangle);\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution1": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution1.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 19,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 19,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n * \n * Example 1:\n * Input: numRows = 5\n * Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n * Example 2:\n * Input: numRows = 1\n * Output: [[1]]\n * \n * Constraints:\n * \n * 1 <= numRows <= 30\n * \n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [];\n    for (let i = 0; i < numRows; i++) {\n        triangle[i] = [];\n        triangle[i][0] = 1;\n        for (let j = 1; j < i; j++) {\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];\n        }\n        if (i > 0) triangle[i][i] = 1;\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution10": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution10.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [];\n    for (let i = 0; i < numRows; i++) {\n        triangle[i] = [1];\n        for (let j = 1; j < i; j++) {\n            triangle[i][j] = (triangle[i - 1][j - 1] || 0) + (triangle[i - 1][j] || 0);\n        }\n        if (i > 0) triangle[i].push(1);\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution4": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution4.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [[1]];\n    for (let i = 1; i < numRows; i++) {\n        triangle[i] = [1];\n        for (let j = 1; j < i; j++) {\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];\n        }\n        triangle[i].push(1);\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution3": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution3.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [];\n    for (let i = 0; i < numRows; i++) {\n        triangle[i] = Array(i + 1).fill(1).map((val, idx) => {\n            return idx === 0 || idx === i ? 1 : triangle[i - 1][idx - 1] + triangle[i - 1][idx];\n        });\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution7": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution7.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [[1]];\n    for (let i = 1; i < numRows; i++) {\n        let prevRow = triangle[i - 1];\n        let newRow = [1];\n        for (let j = 1; j < i; j++) {\n            newRow[j] = prevRow[j - 1] + prevRow[j];\n        }\n        newRow.push(1);\n        triangle.push(newRow);\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution6": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution6.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [];\n    let i = 0;\n    while (i < numRows) {\n        triangle[i] = [1];\n        for (let j = 1; j < i; j++) {\n            triangle[i][j] = triangle[i - 1][j\n\n - 1] + triangle[i - 1][j];\n        }\n        if (i > 0) triangle[i].push(1);\n        i++;\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution2": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution2.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    if (numRows === 1) return [[1]];\n    let result = generate(numRows - 1);\n    let prevRow = result[result.length - 1];\n    let curRow = [1];\n    for (let i = 1; i < prevRow.length; i++) {\n        curRow[i] = prevRow[i] + prevRow[i - 1];\n    }\n    curRow.push(1);\n    result.push(curRow);\n    return result;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution9": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution9.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    let triangle = [];\n    for (let i = 0; i < numRows; i++) {\n        triangle[i] = Array.from({ length: i + 1 }, (v, k) => k === 0 || k === i ? 1 : triangle[i - 1][k - 1] + triangle[i - 1][k]);\n    }\n    return triangle;\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution8": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/chatgpt-4/parsed_outputs/pascals-triangle/JavaScript/solution8.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'generate' is assigned a value but never used.",
                    "line": 7,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 7,
                    "endColumn": 13
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "/**\n * Given an integer numRows, return the first numRows of Pascal's triangle.\n * ...\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    return new Array(numRows).fill().reduce((triangle, _, i) => {\n        triangle.push([1].concat(Array.from({ length: i }, (v, j) => triangle[i - 1][j] + triangle[i - 1][j + 1] || 1)));\n        return triangle;\n    }, []);\n};",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        }
    }
}