{
    "JavaScript": {
        "solution5": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution5.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const hash = {};\n   for (let i = 0; i < nums.length; i++) {\n       hash[nums[i]] = hash[nums[i]] || 0;\n       hash[nums[i]]++;\n   }\n   let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n       if (hash[nums[i]] > 0) {\n           count += Math.floor(target / nums[i]);\n           target %= nums[i];\n       }\n   }\n   return count;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution1": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution1.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   if (target === 0) return 1;\n   if (target < 0) return 0;\n   let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n       count += combinationSum4(nums.slice(i + 1), target - nums[i]);\n   }\n   return count;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution10": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution10.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'memo' is assigned a value but never used.",
                    "line": 2,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 2,
                    "endColumn": 14
                }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const memo = new Map();\n   const combinations = [];\n   backtrack(nums, target, 0, []);\n   return combinations.length;\n   \n   function backtrack(nums, target, index, combination) {\n       if (target === 0) {\n           combinations.push(combination);\n           return;\n       }\n       for (let i = index; i < nums.length; i++) {\n           if (target >= nums[i]) {\n               combination.push(nums[i]);\n               backtrack(nums, target - nums[i], i + 1, combination);\n               combination.pop();\n           }\n       }\n   }\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution4": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution4.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   nums.sort((a, b) => a - b);\n   let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n       count += Math.floor(target / nums[i]);\n       target %= nums[i];\n   }\n   return count;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution3": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution3.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const combinations = [];\n   backtrack(nums, target, 0, []);\n   return combinations.length;\n   \n   function backtrack(nums, target, index, combination) {\n       if (target === 0) {\n           combinations.push(combination);\n           return;\n       }\n       for (let i = index; i < nums.length; i++) {\n           if (target >= nums[i]) {\n               combination.push(nums[i]);\n               backtrack(nums, target - nums[i], i + 1, combination);\n               combination.pop();\n           }\n       }\n   }\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution7": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution7.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   nums.sort((a, b) => a - b);\n   let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n       let mid = Math.floor(nums.length / 2);\n       if (nums[mid] >= target) {\n           count += Math.floor(target / nums[i]);\n           target %= nums[i];\n       } else {\n           count += Math.floor(target / nums[i + mid]);\n           target %= nums[i + mid];\n       }\n   }\n   return count;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution6": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution6.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   nums.sort((a, b) => a - b);\n   let count = 0;\n   for (let i = 0; i < nums.length; i++) {\n       let low = 0;\n       let high = nums.length - 1;\n       while (low <= high) {\n           let mid = Math.floor((low + high) / 2);\n           if (nums[mid] >= target) {\n               high = mid - 1;\n           } else {\n               low = mid + 1;\n           }\n       }\n       count += Math.floor(target / nums[i]);\n       target %= nums[i];\n   }\n   return count;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution2": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution2.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const dp = new Array(target + 1).fill(0);\n   dp[0] = 1;\n   for (let i = 1; i <= target; i++) {\n       for (let j = 0; j < nums.length; j++) {\n           if (i >= nums[j]) {\n               dp[i] += dp[i - nums[j]];\n           }\n       }\n   }\n   return dp[target];\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution9": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution9.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'memo' is assigned a value but never used.",
                    "line": 2,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 2,
                    "endColumn": 14
                }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const memo = new Map();\n   const dp = new Array(target + 1).fill(0);\n   dp[0] = 1;\n   for (let i = 1; i <= target; i++) {\n       for (let j = 0; j < nums.length; j++) {\n           if (i >= nums[j]) {\n               dp[i] += dp[i - nums[j]];\n           }\n       }\n   }\n   return dp[target];\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution8": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/combination-sum-iv/JavaScript/solution8.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'combinationSum4' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 25
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function combinationSum4(nums, target) {\n   const memo = new Map();\n   return combinationSum4Helper(nums, target, 0, memo);\n   \n   function combinationSum4Helper(nums, target, index, memo) {\n       if (target === 0) return 1;\n       if (target < 0) return 0;\n       if (memo.has(target)) return memo.get(target);\n       let count = 0;\n       for (let i = index; i < nums.length; i++) {\n           count += combinationSum4Helper(nums, target - nums[i], i + 1, memo);\n       }\n       memo.set(target, count);\n       return count;\n   }\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        }
    }
}