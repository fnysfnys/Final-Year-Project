{
    "JavaScript": {
        "solution1": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/largest-divisible-subset/JavaScript/solution1.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'largestDivisibleSubset' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 32
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function largestDivisibleSubset(nums) {\n   let maxLength = 0;\n   let currentLength = 0;\n   let currentSubset = [];\n   for (let i = 0; i < nums.length; i++) {\n       for (let j = i + 1; j < nums.length; j++) {\n           if (nums[i] % nums[j] === 0) {\n               currentLength++;\n               currentSubset.push(nums[j]);\n           }\n       }\n       if (currentLength > maxLength) {\n           maxLength = currentLength;\n           currentSubset = [nums[i]];\n       }\n   }\n   return currentSubset;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution3": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/largest-divisible-subset/JavaScript/solution3.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'largestDivisibleSubset' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 32
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function largestDivisibleSubset(nums) {\n   nums.sort((a, b) => a - b);\n   let currentSubset = [];\n   for (let i = 0; i < nums.length; i++) {\n       if (nums[i] % nums[i - 1] === 0) {\n           currentSubset.push(nums[i]);\n       }\n   }\n   return currentSubset;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution2": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/largest-divisible-subset/JavaScript/solution2.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'largestDivisibleSubset' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 32
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function largestDivisibleSubset(nums) {\n   let dp = new Array(nums.length).fill(0);\n   let maxLength = 0;\n   let currentSubset = [];\n   for (let i = 0; i < nums.length; i++) {\n       for (let j = 0; j < i; j++) {\n           if (nums[i] % nums[j] === 0) {\n               dp[i] = Math.max(dp[i], dp[j] + 1);\n           }\n       }\n       if (dp[i] > maxLength) {\n           maxLength = dp[i];\n           currentSubset = [nums[i]];\n       }\n   }\n   return currentSubset;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        }
    }
}