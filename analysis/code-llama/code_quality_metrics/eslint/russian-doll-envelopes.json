{
    "JavaScript": {
        "solution5": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution5.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'width' is defined but never used.",
                    "line": 3,
                    "column": 32,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 3,
                    "endColumn": 37
                }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   return sorted.reduce((max, [width, height]) => Math.max(max, height), 0);\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution1": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution1.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const hash = {};\n   let max = 0;\n   for (const [width, height] of envelopes) {\n       if (!hash[width]) {\n           hash[width] = height;\n       } else if (hash[width] < height) {\n           hash[width] = height;\n       }\n       max = Math.max(max, hash[width]);\n   }\n   return max;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution4": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution4.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       max = Math.max(max, height);\n       const index = sorted.indexOf(width);\n       if (index > -1) {\n           max = Math.max(max, height);\n       }\n   }\n   return max;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution3": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution3.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       const index = binarySearch(sorted, width);\n       if (index > -1) {\n           max = Math.max(max, height);\n       }\n   }\n   return max;\n}\n\nfunction binarySearch(arr, target) {\n   let left = 0;\n   let right = arr.length - 1;\n   while (left <= right) {\n       const mid = (left + right) >>> 1;\n       if (arr[mid][0] === target) {\n           return mid;\n       } else if (arr[mid][0] < target) {\n           left = mid + 1;\n       } else {\n           right = mid - 1;\n       }\n   }\n   return -1;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution7": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution7.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'height' is assigned a value but never used.",
                    "line": 4,
                    "column": 23,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 4,
                    "endColumn": 29
                }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   const set = new Set();\n   for (const [width, height] of sorted) {\n       set.add(width);\n   }\n   return Math.max(...set.values());\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution6": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution6.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   const map = new Map();\n   for (const [width, height] of sorted) {\n       map.set(width, height);\n   }\n   return Math.max(...map.values());\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution2": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution2.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       if (width > max) {\n           max = height;\n       }\n   }\n   return max;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution9": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution9.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                }
            ],
            "suppressedMessages": [],
            "errorCount": 1,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   const found = sorted.find(([width, height]) => width > height);\n   return found ? found[1] : 0;\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        },
        "solution8": {
            "filePath": "/Users/gabrielturner/UCL/Year4/FYP/FYP/model_outputs/code-llama/parsed_outputs/russian-doll-envelopes/JavaScript/solution8.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'maxEnvelopes' is defined but never used.",
                    "line": 1,
                    "column": 10,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 1,
                    "endColumn": 22
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'width' is defined but never used.",
                    "line": 4,
                    "column": 38,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 4,
                    "endColumn": 43
                }
            ],
            "suppressedMessages": [],
            "errorCount": 2,
            "fatalErrorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "source": "function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) => a[0] - b[0]);\n   const filtered = sorted.filter(([width, height]) => width > height);\n   return Math.max(...filtered.map(([width, height]) => height));\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-extra-semi",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-spaces-and-tabs",
                    "replacedBy": []
                }
            ]
        }
    }
}