{
    "Java": "Certainly! Here are **10 different possible implementations** of the `maxSumSubmatrix` function in Java that solve the problem outlined in the docstring. Each implementation uses a different approach or algorithm to find the maximum sum of a rectangle in the matrix such that its sum is no larger than `k`. Let's dive in:\n\n1. **Brute Force with Prefix Sum**:\n   - Calculate the prefix sum for each row.\n   - For each pair of columns, compute the sum of submatrices using the prefix sum.\n   - Keep track of the maximum sum that does not exceed `k`.\n   - Time Complexity: O(m^2 * n^2)\n\n```java\npublic int maxSumSubmatrix(int[][] matrix, int k) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int left = 0; left < n; left++) {\n        int[] rowSum = new int[m];\n        for (int right = left; right < n; right++) {\n            for (int i = 0; i < m; i++) {\n                rowSum[i] += matrix[i][right];\n            }\n            maxSum = Math.max(maxSum, maxSubarraySum(rowSum, k));\n        }\n    }\n\n    return maxSum;\n}\n\nprivate int maxSubarraySum(int[] arr, int k) {\n    int maxSum = Integer.MIN_VALUE;\n    int currSum = 0;\n    TreeSet<Integer> prefixSums = new TreeSet<>();\n    prefixSums.add(0);\n\n    for (int num : arr) {\n        currSum += num;\n        Integer prevSum = prefixSums.ceiling(currSum - k);\n        if (prevSum != null) {\n            maxSum = Math.max(maxSum, currSum - prevSum);\n        }\n        prefixSums.add(currSum);\n    }\n\n    return maxSum;\n}\n```\n\n2. **Kadane's Algorithm with Binary Search**:\n   - Apply Kadane's algorithm on each row to find the maximum subarray sum.\n   - Use a TreeSet to store prefix sums and find the closest sum less than or equal to `currSum - k`.\n   - Time Complexity: O(m * m * n * log(m))\n\n```java\n// Same maxSubarraySum method as above\n\npublic int maxSumSubmatrix(int[][] matrix, int k) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int left = 0; left < n; left++) {\n        int[] rowSum = new int[m];\n        for (int right = left; right < n; right++) {\n            for (int i = 0; i < m; i++) {\n                rowSum[i] += matrix[i][right];\n            }\n            maxSum = Math.max(maxSum, maxSubarraySum(rowSum, k));\n        }\n    }\n\n    return maxSum;\n}\n```\n\n3. **2D Prefix Sum with TreeSet**:\n   - Compute the 2D prefix sum matrix.\n   - Fix the left and right columns and slide the top and bottom rows.\n   - Use a TreeSet to find the maximum subarray sum.\n   - Time Complexity: O(m^2 * n * log(m))\n\n```java\npublic int maxSumSubmatrix(int[][] matrix, int k) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int left = 0; left < n; left++) {\n        int[] rowSum = new int[m];\n        for (int right = left; right < n; right++) {\n            for (int i = 0; i < m; i++) {\n                rowSum[i] += matrix[i][right];\n            }\n            maxSum = Math.max(maxSum, maxSubarraySum(rowSum, k));\n        }\n    }\n\n    return maxSum;\n}\n```\n\n4. **2D Kadane's Algorithm**:\n   - Fix the left and right columns and slide the top and bottom rows.\n   - Apply Kadane's algorithm on the 1D array formed by summing up the rows.\n   - Time Complexity: O(m^2 * n)\n\n```java\n// Same maxSubarraySum method as above\n\npublic int maxSumSubmatrix(int[][] matrix, int k) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int left = 0; left < n; left++) {\n        int[] rowSum = new int[m];\n        for (int right = left; right < n; right++) {\n            for (int i = 0; i < m; i++) {\n                rowSum[i] += matrix[i][right];\n            }\n            maxSum = Math.max(max\n\nSource: Conversation with Bing, 19/02/2024\n(1) github.com. https://github.com/zzzzzr/for_leetcode/tree/783c631e6be5b57c685356f5d07c5ec511b8eea4/Leetcode%2FLeetcode363.java.",
    "Python": "Certainly! Here are **10 different possible implementations** of the `maxSumSubmatrix` function in Python that solve the problem outlined in the docstring. Each implementation uses a different approach or algorithm to find the maximum sum of a rectangle in the matrix that is no larger than `k`.\n\n1. **Brute Force (Naive) Approach**:\n   - Generate all possible submatrices and compute their sums.\n   - Keep track of the maximum sum that does not exceed `k`.\n   - Time complexity: O(m^2 * n^2 * m * n) where m and n are the number of rows and columns, respectively.\n\n```python\nclass Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for i1 in range(m):\n            for j1 in range(n):\n                for i2 in range(i1, m):\n                    for j2 in range(j1, n):\n                        submatrix_sum = sum(matrix[i][j] for i in range(i1, i2 + 1) for j in range(j1, j2 + 1))\n                        if submatrix_sum <= k:\n                            max_sum = max(max_sum, submatrix_sum)\n        return max_sum\n```\n\n2. **Prefix Sum and Binary Search**:\n   - Compute the prefix sum of each row.\n   - Iterate through all pairs of columns and use binary search to find the maximum subarray sum.\n   - Time complexity: O(m^2 * n * log(n)).\n\n```python\nclass Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for left in range(n):\n            row_sum = [0] * m\n            for right in range(left, n):\n                for i in range(m):\n                    row_sum[i] += matrix[i][right]\n                prefix_sum = [0]\n                curr_sum = 0\n                for s in row_sum:\n                    curr_sum += s\n                    idx = bisect.bisect_left(prefix_sum, curr_sum - k)\n                    if idx < len(prefix_sum):\n                        max_sum = max(max_sum, curr_sum - prefix_sum[idx])\n                    bisect.insort(prefix_sum, curr_sum)\n        return max_sum\n```\n\n3. **Kadane's Algorithm for 1D Array**:\n   - Apply Kadane's algorithm to each row to find the maximum subarray sum.\n   - Use a set to store prefix sums and find the maximum subarray sum that does not exceed `k`.\n   - Time complexity: O(m^2 * n).\n\n```python\nclass Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for left in range(n):\n            row_sum = [0] * m\n            for right in range(left, n):\n                for i in range(m):\n                    row_sum[i] += matrix[i][right]\n                prefix_sum = [0]\n                curr_sum = 0\n                for s in row_sum:\n                    curr_sum += s\n                    idx = bisect.bisect_left(prefix_sum, curr_sum - k)\n                    if idx < len(prefix_sum):\n                        max_sum = max(max_sum, curr_sum - prefix_sum[idx])\n                    bisect.insort(prefix_sum, curr_sum)\n        return max_sum\n```\n\n4. **2D Kadane's Algorithm**:\n   - Apply Kadane's algorithm to each pair of rows to find the maximum subarray sum between those rows.\n   - Use a set to store prefix sums and find the maximum subarray sum that does not exceed `k`.\n   - Time complexity: O(m^2 * n).\n\n```python\nclass Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for i1 in range(m):\n            row_sum = [0] * n\n            for i2 in range(i1, m):\n                for j in range(n):\n                    row_sum[j] += matrix[i2][j]\n                prefix_sum = [0]\n                curr_sum = 0\n                for s in row_sum:\n                    curr_sum += s\n                    idx = bisect.bisect_left(prefix_sum, curr_sum - k)\n                    if idx < len(prefix_sum):\n                        max_sum = max(max_sum, curr_sum - prefix_sum[idx])\n                    bisect.insort(prefix_sum, curr_sum)\n        return max_sum\n```\n\n5. **Optimized 2D Kadane's Algorithm**:\n   - Use a set to store prefix sums and find the maximum subarray sum that does not exceed `k`.\n   - Time complexity: O(m^2 *",
    "JavaScript": "Certainly! Below is an implementation of the `maxSumSubmatrix` function in JavaScript that solves the problem outlined in the docstring. This function finds the maximum sum of a rectangle in the given matrix such that the sum is no larger than `k`.\n\n```javascript\n/**\n * Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\n * It is guaranteed that there will be a rectangle with a sum no larger than k.\n *\n * Example 1:\n *\n * Input: matrix = [[1,0,1],[0,-2,3]], k = 2\n * Output: 2\n * Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n *\n * Example 2:\n *\n * Input: matrix = [[2,2,-1]], k = 3\n * Output: 3\n *\n * Constraints:\n *\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= m, n <= 100\n * -100 <= matrix[i][j] <= 100\n * -105 <= k <= 105\n *\n * Follow up: What if the number of rows is much larger than the number of columns?\n *\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar maxSumSubmatrix = function(matrix, k) {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    let maxSum = -Infinity;\n\n    // Iterate over all possible left and right columns\n    for (let left = 0; left < cols; left++) {\n        const rowSums = new Array(rows).fill(0);\n\n        for (let right = left; right < cols; right++) {\n            // Calculate cumulative row sums for the current submatrix\n            for (let row = 0; row < rows; row++) {\n                rowSums[row] += matrix[row][right];\n            }\n\n            // Find the maximum subarray sum (no larger than k) using Kadane's algorithm\n            let currSum = 0;\n            let maxCurrSum = -Infinity;\n            for (const sum of rowSums) {\n                currSum = Math.max(sum, currSum + sum);\n                maxCurrSum = Math.max(maxCurrSum, currSum);\n            }\n\n            // Update maxSum if the current submatrix sum is valid\n            if (maxCurrSum <= k) {\n                maxSum = Math.max(maxSum, maxCurrSum);\n            }\n        }\n    }\n\n    return maxSum;\n};\n\n// Example usage:\nconst matrix1 = [[1, 0, 1], [0, -2, 3]];\nconst k1 = 2;\nconsole.log(maxSumSubmatrix(matrix1, k1)); // Output: 2\n\nconst matrix2 = [[2, 2, -1]];\nconst k2 = 3;\nconsole.log(maxSumSubmatrix(matrix2, k2)); // Output: 3\n```\n\nThis implementation efficiently computes the maximum submatrix sum using cumulative row sums and Kadane's algorithm. If you have any further questions or need additional clarifications, feel free to ask! \ud83d\ude0a\n\nSource: Conversation with Bing, 05/03/2024\n(1) javascript - Find max sum submatrix in 2D array/matrix - Stack Overflow. https://stackoverflow.com/questions/66555138/find-max-sum-submatrix-in-2d-array-matrix.\n(2) Maximum sum submatrix - GeeksforGeeks. https://www.geeksforgeeks.org/maximum-sum-submatrix/.\n(3) Getting the submatrix with maximum sum? - Stack Overflow. https://stackoverflow.com/questions/2643908/getting-the-submatrix-with-maximum-sum.\n(4) github.com. https://github.com/isudox/nerd-algorithm/tree/1819f41698c5e2159c5225b1a53d0963d8130564/java-algorithm%2Fsrc%2Fmain%2Fjava%2Fcom%2Fleetcode%2FProblem363.java.\n(5) github.com. https://github.com/bbb125/leetcode/tree/10a13a8ff8c66e0665610a2d5e05f9935dcd763b/july-2021-challenge%2Fmax-sum-of-rectangle-no-larger-than-k%2Fmain.cpp.\n(6) github.com. https://github.com/rmallela0426/LeetCodeProblems/tree/33472bc788a2e54294fdb59cf26438f92f322493/Hard%2F363-MaxSumOfRectangeNoLargerThanK.cpp.\n(7) github.com. https://github.com/ataraxy-zhi/leetcode_questions_with_java/tree/9eea13ae51140c0eabf404da3ecd879f9af6004c/src%2Fcom%2Fsolution%2Fonequestionperday%2Fapril2021%2Fmaxsumofrectanglenolargerthank363%2FMaxSumOfRectangleNoLargerThanK.java.\n(8) github.com. https://github.com/hlmmd/leetcrawler/tree/259c5e6cc5adb82fdc998fc5915ef5f95c98a13c/markdown%2F363.md.\n(9) github.com. https://github.com/enzo1989/leetcode/tree/99ef6eff1d9bd21514d6ad0f71b23256bdca2be1/src%2Fmain%2Fjava%2Fcom%2Fexample%2Fleetcode%2Fchallenge%2Ftest2021%2FJuly%2Fweek1%2FMaxSumRectangle.java.\n(10) github.com. https://github.com/zhang1pr/LeetCode.js/tree/b46a146fcd9577f412c3a343b02c045d422e491b/301-400%2F%28363%29MaxSumOfRectangleNoLargerThanK.js."
}