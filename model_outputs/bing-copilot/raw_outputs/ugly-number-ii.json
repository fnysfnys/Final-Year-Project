{
    "Java": "Certainly! Let's explore **10 different implementations** of the `nthUglyNumber` function in Java. The goal is to find the **nth ugly number**, where an ugly number is defined as a positive integer whose prime factors are limited to 2, 3, and 5.\n\n1. **Simple Loop Approach**:\n```java\npublic int nthUglyNumber(int n) {\n    int[] uglyNumbers = new int[n];\n    uglyNumbers[0] = 1;\n    int nextUglyIndex = 1;\n\n    int nextMultipleOf2 = 2;\n    int nextMultipleOf3 = 3;\n    int nextMultipleOf5 = 5;\n\n    while (nextUglyIndex < n) {\n        int nextUgly = Math.min(nextMultipleOf2, Math.min(nextMultipleOf3, nextMultipleOf5));\n        uglyNumbers[nextUglyIndex] = nextUgly;\n\n        if (nextUgly == nextMultipleOf2) {\n            nextMultipleOf2 = 2 * uglyNumbers[++nextMultipleOf2];\n        }\n        if (nextUgly == nextMultipleOf3) {\n            nextMultipleOf3 = 3 * uglyNumbers[++nextMultipleOf3];\n        }\n        if (nextUgly == nextMultipleOf5) {\n            nextMultipleOf5 = 5 * uglyNumbers[++nextMultipleOf5];\n        }\n\n        nextUglyIndex++;\n    }\n\n    return uglyNumbers[n - 1];\n}\n```\n\n2. **Priority Queue (Min Heap)**:\n```java\npublic int nthUglyNumber(int n) {\n    PriorityQueue<Long> minHeap = new PriorityQueue<>();\n    minHeap.offer(1L);\n\n    for (int i = 1; i < n; i++) {\n        long current = minHeap.poll();\n        minHeap.offer(current * 2);\n        minHeap.offer(current * 3);\n        minHeap.offer(current * 5);\n    }\n\n    return minHeap.poll().intValue();\n}\n```\n\n3. **Dynamic Programming**:\n```java\npublic int nthUglyNumber(int n) {\n    int[] uglyNumbers = new int[n];\n    uglyNumbers[0] = 1;\n    int index2 = 0, index3 = 0, index5 = 0;\n\n    for (int i = 1; i < n; i++) {\n        int nextUgly = Math.min(uglyNumbers[index2] * 2, Math.min(uglyNumbers[index3] * 3, uglyNumbers[index5] * 5));\n        uglyNumbers[i] = nextUgly;\n\n        if (nextUgly == uglyNumbers[index2] * 2) index2++;\n        if (nextUgly == uglyNumbers[index3] * 3) index3++;\n        if (nextUgly == uglyNumbers[index5] * 5) index5++;\n    }\n\n    return uglyNumbers[n - 1];\n}\n```\n\n4. **Set-Based Approach**:\n```java\npublic int nthUglyNumber(int n) {\n    Set<Long> uglySet = new TreeSet<>();\n    uglySet.add(1L);\n\n    while (uglySet.size() < n) {\n        long smallest = uglySet.iterator().next();\n        uglySet.remove(smallest);\n        uglySet.add(smallest * 2);\n        uglySet.add(smallest * 3);\n        uglySet.add(smallest * 5);\n    }\n\n    return uglySet.iterator().next().intValue();\n}\n```\n\n5. **Recursive Approach**:\n```java\npublic int nthUglyNumber(int n) {\n    if (n == 1) return 1;\n    return Math.min(nthUglyNumber(n - 1) * 2, Math.min(nthUglyNumber(n - 1) * 3, nthUglyNumber(n - 1) * 5));\n}\n```\n\n6. **Bit Manipulation**:\n```java\npublic int nthUglyNumber(int n) {\n    int[] factors = {2, 3, 5};\n    int ugly = 1;\n    int[] indices = new int[3];\n\n    for (int i = 1; i < n; i++) {\n        int nextUgly = Integer.MAX_VALUE;\n        for (int j = 0; j < 3; j++) {\n            nextUgly = Math.min(nextUgly, factors[j] * ugly);\n        }\n        ugly = nextUgly;\n\n        for (int j = 0; j < 3; j++) {\n            if (factors[j] * ugly == nextUgly) {\n                indices[j]++;\n            }\n        }\n    }\n\n    return ugly;\n}\n```\n\n7. **Prime Factorization**:\n```java\npublic int nthUglyNumber(int n) {\n    int[] primes = {2, 3, 5};\n    int[] counts = new int[3];\n    int[] uglyNumbers =\n\nSource: Conversation with Bing, 19/02/2024\n(1) algorithm - n\u1d57\u02b0 ugly number - Stack Overflow. https://stackoverflow.com/questions/4600048/n%e1%b5%97%ca%b0-ugly-number.\n(2) Ugly Numbers - GeeksforGeeks. https://www.geeksforgeeks.org/ugly-numbers/.\n(3) Ugly number Java - Javatpoint. https://www.javatpoint.com/ugly-number-java.",
    "Python": "Certainly! Here are **10 different implementations** of the `nthUglyNumber` function in Python that solve the problem outlined in the docstring. Each approach provides a different way to find the nth ugly number:\n\n1. **Simple Loop Approach**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        def maxDivide(a, b):\n            while a % b == 0:\n                a = a // b\n            return a\n\n        def isUgly(no):\n            no = maxDivide(no, 2)\n            no = maxDivide(no, 3)\n            no = maxDivide(no, 5)\n            return no == 1\n\n        i = 1\n        count = 1\n        while n > count:\n            i += 1\n            if isUgly(i):\n                count += 1\n        return i\n```\n\n2. **Dynamic Programming Approach**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n\n        for _ in range(1, n):\n            next_ugly = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            ugly.append(next_ugly)\n\n            if next_ugly == ugly[i2] * 2:\n                i2 += 1\n            if next_ugly == ugly[i3] * 3:\n                i3 += 1\n            if next_ugly == ugly[i5] * 5:\n                i5 += 1\n\n        return ugly[-1]\n```\n\n3. **Heapq (Priority Queue) Approach**:\n```python\nimport heapq\n\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        heap = [1]\n        seen = set()\n\n        while n > 0:\n            num = heapq.heappop(heap)\n            n -= 1\n\n            if n == 0:\n                return num\n\n            for factor in [2, 3, 5]:\n                next_ugly = num * factor\n                if next_ugly not in seen:\n                    seen.add(next_ugly)\n                    heapq.heappush(heap, next_ugly)\n```\n\n4. **Mathematical Approach**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n\n        for _ in range(1, n):\n            next_ugly = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            ugly.append(next_ugly)\n\n            if next_ugly == ugly[i2] * 2:\n                i2 += 1\n            if next_ugly == ugly[i3] * 3:\n                i3 += 1\n            if next_ugly == ugly[i5] * 5:\n                i5 += 1\n\n        return ugly[-1]\n```\n\n5. **Pythonic Approach using Set**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        ugly_numbers = {1}\n        while len(ugly_numbers) < n:\n            next_ugly = min(ugly_numbers) * 2\n            ugly_numbers.add(next_ugly)\n            ugly_numbers.add(next_ugly * 3)\n            ugly_numbers.add(next_ugly * 5)\n        return min(ugly_numbers)\n```\n\n6. **Generator Approach**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        def generate_ugly_numbers():\n            heap = [1]\n            seen = set()\n            while True:\n                num = heapq.heappop(heap)\n                yield num\n                for factor in [2, 3, 5]:\n                    next_ugly = num * factor\n                    if next_ugly not in seen:\n                        seen.add(next_ugly)\n                        heapq.heappush(heap, next_ugly)\n\n        gen = generate_ugly_numbers()\n        for _ in range(n):\n            result = next(gen)\n        return result\n```\n\n7. **Recursive Approach**:\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        def find_ugly(num, count):\n            if count == n:\n                return num\n            next_ugly = min(num * 2, num * 3, num * 5)\n            return find_ugly(next_ugly, count + 1)\n\n        return find_ugly(1, 1)\n```\n\n8. **Memoization Approach**:\n```python\nclass Solution(object\n\nSource: Conversation with Bing, 19/02/2024\n(1) Ugly Numbers - GeeksforGeeks. https://www.geeksforgeeks.org/ugly-numbers/.\n(2) Ugly Number Ii - PrepForTech. https://prepfortech.in/leetcode-solutions/ugly-number-ii/.\n(3) java - LeetCode 264. Ugly Number II - Stack Overflow. https://stackoverflow.com/questions/62733611/leetcode-264-ugly-number-ii-custom-ugly-number-finding-algorithm.\n(4) algorithm - n\u1d57\u02b0 ugly number - Stack Overflow. https://stackoverflow.com/questions/4600048/n%e1%b5%97%ca%b0-ugly-number.\n(5) python - Finding the nth ugly number - Code Review Stack Exchange. https://codereview.stackexchange.com/questions/229798/finding-the-nth-ugly-number.",
    "JavaScript": "Certainly! Let's explore **10 different implementations** of the `nthUglyNumber` function in JavaScript. These implementations will find the **nth ugly number**, where an ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n\n1. **Simple Loop Approach**:\n```javascript\nvar nthUglyNumber = function(n) {\n    let count = 1;\n    let num = 1;\n    while (count < n) {\n        num++;\n        if (isUgly(num)) {\n            count++;\n        }\n    }\n    return num;\n};\n\nfunction isUgly(num) {\n    while (num % 2 === 0) num /= 2;\n    while (num % 3 === 0) num /= 3;\n    while (num % 5 === 0) num /= 5;\n    return num === 1;\n}\n```\n\n2. **Dynamic Programming Approach**:\n```javascript\nvar nthUglyNumber = function(n) {\n    const ugly = new Array(n);\n    ugly[0] = 1;\n    let i2 = 0, i3 = 0, i5 = 0;\n    for (let i = 1; i < n; i++) {\n        const next2 = ugly[i2] * 2;\n        const next3 = ugly[i3] * 3;\n        const next5 = ugly[i5] * 5;\n        ugly[i] = Math.min(next2, next3, next5);\n        if (ugly[i] === next2) i2++;\n        if (ugly[i] === next3) i3++;\n        if (ugly[i] === next5) i5++;\n    }\n    return ugly[n - 1];\n};\n```\n\n3. **Using a SortedSet (Java-like)**:\n```javascript\nvar nthUglyNumber = function(n) {\n    const next = new Set([1]);\n    let cur = 0;\n    for (let i = 0; i < n; i++) {\n        cur = Math.min(...next);\n        next.delete(cur);\n        next.add(cur * 2);\n        next.add(cur * 3);\n        next.add(cur * 5);\n    }\n    return cur;\n};\n```\n\n4. **Recursive Approach**:\n```javascript\nvar nthUglyNumber = function(n) {\n    if (n === 1) return 1;\n    const prev = nthUglyNumber(n - 1);\n    let next = prev + 1;\n    while (!isUgly(next)) next++;\n    return next;\n};\n\nfunction isUgly(num) {\n    while (num % 2 === 0) num /= 2;\n    while (num % 3 === 0) num /= 3;\n    while (num % 5 === 0) num /= 5;\n    return num === 1;\n}\n```\n\n5. **Mathematical Approach**:\n```javascript\nvar nthUglyNumber = function(n) {\n    return Math.pow(2, Math.floor(n / 3)) * Math.pow(3, Math.floor((n - 1) / 3));\n};\n```\n\n6. **Prime Factorization Approach**:\n```javascript\nvar nthUglyNumber = function(n) {\n    let num = 1;\n    while (n > 0) {\n        if (isUgly(num)) n--;\n        num++;\n    }\n    return num - 1;\n};\n\nfunction isUgly(num) {\n    while (num % 2 === 0) num /= 2;\n    while (num % 3 === 0) num /= 3;\n    while (num % 5 === 0) num /= 5;\n    return num === 1;\n}\n```\n\n7. **Using a Priority Queue (Min Heap)**:\n```javascript\nvar nthUglyNumber = function(n) {\n    const pq = new MinHeap();\n    pq.insert(1);\n    let count = 0;\n    while (count < n) {\n        const cur = pq.extractMin();\n        if (cur !== pq.peek()) {\n            pq.insert(cur * 2);\n            pq.insert(cur * 3);\n            pq.insert(cur * 5);\n            count++;\n        }\n    }\n    return pq.peek();\n};\n```\n\n8. **Using a Generator Function**:\n```javascript\nfunction* generateUglyNumbers() {\n    const pq = new MinHeap();\n    pq.insert(1);\n    while (true) {\n        const cur = pq.extractMin();\n        yield cur;\n        pq.insert(cur * 2);\n        pq.insert(cur * 3);\n        pq.insert(cur * 5);\n    }\n}\n\nvar nthUglyNumber = function(n) {\n    const generator = generateUglyNumbers();\n    let count = 0;\n    let result;\n    while (count < n) {\n        result = generator.next\n\nSource: Conversation with Bing, 19/02/2024\n(1) algorithm - n\u1d57\u02b0 ugly number - Stack Overflow. https://stackoverflow.com/questions/4600048/n%e1%b5%97%ca%b0-ugly-number.\n(2) Ugly Numbers - GeeksforGeeks. https://www.geeksforgeeks.org/ugly-numbers/.\n(3) JavaScript - Find the nth ugly number - w3resource. https://www.w3resource.com/javascript-exercises/javascript-math-exercise-101.php.\n(4) Ugly Number | Scaler Topics. https://www.scaler.com/topics/ugly-number/.\n(5) Check for Ugly number in JavaScript - Online Tutorials Library. https://www.tutorialspoint.com/check-for-ugly-number-in-javascript.\n(6) Find the nth Digit of a Number JavaScript - Stack Overflow. https://stackoverflow.com/questions/59850320/find-the-nth-digit-of-a-number-javascript."
}