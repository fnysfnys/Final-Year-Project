{
    "Java": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>numDistinct</code> function in Java:</p>\n<ol>\n<li>Using a brute force approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   int count = 0;\n   for (int i = 0; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (s.charAt(i) == t.charAt(j)) {\n               count++;\n           }\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Using a hash map to keep track of the distinct subsequences:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int count = 0;\n   for (int i = 0; i &lt; t.length(); i++) {\n       char c = t.charAt(i);\n       if (map.containsKey(c)) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Using a dynamic programming approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (s.charAt(i) == t.charAt(j)) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<ol start=\"4\">\n<li>Using a sliding window approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   int count = 0;\n   for (int i = 0; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (s.charAt(i) == t.charAt(j)) {\n               count++;\n           }\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"5\">\n<li>Using a combination of hash maps and dynamic programming:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (map.containsKey(t.charAt(j))) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<ol start=\"6\">\n<li>Using a combination of hash maps and sliding windows:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int count = 0;\n   for (int i = 0; i &lt; t.length(); i++) {\n       char c = t.charAt(i);\n       if (map.containsKey(c)) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"7\">\n<li>Using a combination of hash maps and dynamic programming with a sliding window:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (map.containsKey(t.charAt(j))) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<ol start=\"8\">\n<li>Using a combination of hash maps and dynamic programming with a sliding window and a hash map:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (map.containsKey(t.charAt(j))) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<ol start=\"9\">\n<li>Using a combination of hash maps and dynamic programming with a sliding window and a hash map, and a combination of hash maps and dynamic programming with a sliding window and a hash map:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (map.containsKey(t.charAt(j))) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<ol start=\"10\">\n<li>Using a combination of hash maps and dynamic programming with a sliding window and a hash map, and a combination of hash maps and dynamic programming with a sliding window and a hash map, and a combination of hash maps and dynamic programming with a sliding window and a hash map:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int numDistinct(String s, String t) {\n   Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int i = 0; i &lt; s.length(); i++) {\n       char c = s.charAt(i);\n       if (!map.containsKey(c)) {\n           map.put(c, 1);\n       } else {\n           map.put(c, map.get(c) + 1);\n       }\n   }\n   int[] dp = new int[s.length() + 1];\n   for (int i = 0; i &lt; s.length(); i++) {\n       dp[i] = 1;\n   }\n   for (int i = 1; i &lt; s.length(); i++) {\n       for (int j = 0; j &lt; t.length(); j++) {\n           if (map.containsKey(t.charAt(j))) {\n               dp[i] += dp[i - 1];\n           }\n       }\n   }\n   return dp[s.length()];\n}\n</code></pre>\n<p>Note: These are just some examples of possible implementations, and there may be other ways to solve the problem as well.</p>\n</span>  </div>",
    "Python": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>numDistinct</code> function in Python:</p>\n<ol>\n<li>Using a brute force approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"2\">\n<li>Using a dynamic programming approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   dp = [0] * (len(s) + 1)\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               dp[j+1] = dp[j] + 1\n   return dp[len(s)]\n</code></pre>\n<ol start=\"3\">\n<li>Using a sliding window approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"4\">\n<li>Using a hash table approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"5\">\n<li>Using a suffix tree approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"6\">\n<li>Using a trie approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"7\">\n<li>Using a suffix array approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"8\">\n<li>Using a suffix tree with a hash table approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"9\">\n<li>Using a suffix tree with a trie approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<ol start=\"10\">\n<li>Using a suffix tree with a suffix array approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def numDistinct(s, t):\n   count = 0\n   for i in range(len(s)):\n       for j in range(i, len(s)):\n           if s[i:j+1] == t:\n               count += 1\n   return count\n</code></pre>\n<p>Note that these are just examples, and there may be other ways to solve the problem as well.</p>\n</span>  </div>",
    "JavaScript": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 different possible implementations of the <code>numDistinct</code> function in JavaScript:</p>\n<ol>\n<li>Using a brute force approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   for (let i = 0; i &lt; s.length; i++) {\n       for (let j = 0; j &lt; t.length; j++) {\n           if (s[i] === t[j]) {\n               count++;\n           }\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Using a sliding window approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   for (let i = 0; i &lt; s.length; i++) {\n       let window = s.substring(i, i + t.length);\n       if (window === t) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Using a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let hash = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       if (!hash[s[i]]) {\n           hash[s[i]] = 1;\n       } else {\n           hash[s[i]]++;\n       }\n   }\n   for (let i = 0; i &lt; t.length; i++) {\n       if (hash[t[i]]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"4\">\n<li>Using a trie:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let trie = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       let node = trie;\n       for (let j = 0; j &lt; s[i].length; j++) {\n           if (!node[s[i][j]]) {\n               node[s[i][j]] = {};\n           }\n           node = node[s[i][j]];\n       }\n   }\n   for (let i = 0; i &lt; t.length; i++) {\n       let node = trie;\n       for (let j = 0; j &lt; t[i].length; j++) {\n           if (!node[t[i][j]]) {\n               count++;\n               break;\n           }\n           node = node[t[i][j]];\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"5\">\n<li>Using a suffix tree:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixTree = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       let node = suffixTree;\n       for (let j = i; j &lt; s.length; j++) {\n           if (!node[s[j]]) {\n               node[s[j]] = {};\n           }\n           node = node[s[j]];\n       }\n   }\n   for (let i = 0; i &lt; t.length; i++) {\n       let node = suffixTree;\n       for (let j = 0; j &lt; t[i].length; j++) {\n           if (!node[t[i][j]]) {\n               count++;\n               break;\n           }\n           node = node[t[i][j]];\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"6\">\n<li>Using a suffix array:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixArray = [];\n   for (let i = 0; i &lt; s.length; i++) {\n       suffixArray.push(s.substring(i));\n   }\n   for (let i = 0; i &lt; t.length; i++) {\n       for (let j = 0; j &lt; suffixArray.length; j++) {\n           if (suffixArray[j] === t[i]) {\n               count++;\n               break;\n           }\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"7\">\n<li>Using a suffix automaton:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixAutomaton = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       let node = suffixAutomaton;\n       for (let j = i; j &lt; s.length; j++) {\n           if (!node[s[j]]) {\n               node[s[j]] = {};\n           }\n           node = node[s[j]];\n       }\n   }\n   for (let i = 0; i &lt; t.length; i++) {\n       let node = suffixAutomaton;\n       for (let j = 0; j &lt; t[i].length; j++) {\n           if (!node[t[i][j]]) {\n               count++;\n               break;\n           }\n           node = node[t[i][j]];\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"8\">\n<li>Using a suffix tree with a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixTree = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       let node = suffixTree;\n       for (let j = i; j &lt; s.length; j++) {\n           if (!node[s[j]]) {\n               node[s[j]] = {};\n           }\n           node = node[s[j]];\n       }\n   }\n   let hash = {};\n   for (let i = 0; i &lt; t.length; i++) {\n       let node = suffixTree;\n       for (let j = 0; j &lt; t[i].length; j++) {\n           if (!node[t[i][j]]) {\n               count++;\n               break;\n           }\n           node = node[t[i][j]];\n       }\n       hash[t[i]] = count;\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"9\">\n<li>Using a suffix array with a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixArray = [];\n   for (let i = 0; i &lt; s.length; i++) {\n       suffixArray.push(s.substring(i));\n   }\n   let hash = {};\n   for (let i = 0; i &lt; t.length; i++) {\n       for (let j = 0; j &lt; suffixArray.length; j++) {\n           if (suffixArray[j] === t[i]) {\n               count++;\n               break;\n           }\n       }\n       hash[t[i]] = count;\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"10\">\n<li>Using a suffix automaton with a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function numDistinct(s, t) {\n   let count = 0;\n   let suffixAutomaton = {};\n   for (let i = 0; i &lt; s.length; i++) {\n       let node = suffixAutomaton;\n       for (let j = i; j &lt; s.length; j++) {\n           if (!node[s[j]]) {\n               node[s[j]] = {};\n           }\n           node = node[s[j]];\n       }\n   }\n   let hash = {};\n   for (let i = 0; i &lt; t.length; i++) {\n       let node = suffixAutomaton;\n       for (let j = 0; j &lt; t[i].length; j++) {\n           if (!node[t[i][j]]) {\n               count++;\n               break;\n           }\n           node = node[t[i][j]];\n       }\n       hash[t[i]] = count;\n   }\n   return count;\n}\n</code></pre>\n<p>Note: These implementations are just examples and may not be the most efficient or effective solutions.</p>\n</span>  </div>"
}