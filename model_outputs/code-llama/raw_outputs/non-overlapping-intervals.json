{
    "Java": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>eraseOverlapIntervals</code> function in Java:</p>\n<ol>\n<li>Sort the intervals by their start time and then iterate through the intervals, removing any overlapping intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   Arrays.sort(intervals, (a, b) -&gt; a[0] - b[0]);\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervals[i][1] &lt;= intervals[i + 1][0]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Use a hash map to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   Map&lt;Integer, Integer&gt; intervalMap = new HashMap&lt;&gt;();\n   for (int[] interval : intervals) {\n       intervalMap.put(interval[0], interval[1]);\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervalMap.get(intervals[i][0]) &gt; intervals[i][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Use a priority queue to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   PriorityQueue&lt;int[]&gt; queue = new PriorityQueue&lt;&gt;((a, b) -&gt; a[0] - b[0]);\n   for (int[] interval : intervals) {\n       queue.add(interval);\n   }\n   int count = 0;\n   while (!queue.isEmpty()) {\n       int[] interval = queue.poll();\n       if (interval[1] &lt;= queue.peek()[0]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"4\">\n<li>Use a binary search tree to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   TreeMap&lt;Integer, Integer&gt; intervalMap = new TreeMap&lt;&gt;();\n   for (int[] interval : intervals) {\n       intervalMap.put(interval[0], interval[1]);\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervalMap.get(intervals[i][0]) &gt; intervals[i][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"5\">\n<li>Use a disjoint set data structure to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   DisjointSet&lt;Integer&gt; intervalSet = new DisjointSet&lt;&gt;();\n   for (int[] interval : intervals) {\n       intervalSet.add(interval[0], interval[1]);\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervalSet.find(intervals[i][0]) != intervalSet.find(intervals[i][1])) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"6\">\n<li>Use a sweep line algorithm to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   int[] sweepLine = new int[intervals.length];\n   for (int i = 0; i &lt; intervals.length; i++) {\n       sweepLine[i] = intervals[i][0];\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (sweepLine[i] &lt;= sweepLine[i + 1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"7\">\n<li>Use a divide and conquer algorithm to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   int[][] left = new int[intervals.length / 2][];\n   int[][] right = new int[intervals.length / 2][];\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (i &lt; intervals.length / 2) {\n           left[i] = intervals[i];\n       } else {\n           right[i - intervals.length / 2] = intervals[i];\n       }\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (left[i][0] &lt;= right[i][0] &amp;&amp; left[i][1] &gt;= right[i][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"8\">\n<li>Use a dynamic programming algorithm to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   int[][] dp = new int[intervals.length][];\n   for (int i = 0; i &lt; intervals.length; i++) {\n       dp[i] = new int[2];\n       dp[i][0] = intervals[i][0];\n       dp[i][1] = intervals[i][1];\n   }\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (dp[i][0] &lt;= dp[i + 1][0] &amp;&amp; dp[i][1] &gt;= dp[i + 1][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"9\">\n<li>Use a greedy algorithm to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervals[i][0] &lt;= intervals[i + 1][0] &amp;&amp; intervals[i][1] &gt;= intervals[i + 1][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<ol start=\"10\">\n<li>Use a recursive algorithm to keep track of the start and end times of each interval. Iterate through the intervals and check if the current interval overlaps with any of the previous intervals.</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int eraseOverlapIntervals(int[][] intervals) {\n   int count = 0;\n   for (int i = 0; i &lt; intervals.length; i++) {\n       if (intervals[i][0] &lt;= intervals[i + 1][0] &amp;&amp; intervals[i][1] &gt;= intervals[i + 1][1]) {\n           count++;\n       }\n   }\n   return count;\n}\n</code></pre>\n<p>These are just a few examples of possible implementations of the <code>eraseOverlapIntervals</code> function in Java. The best implementation will depend on the specific requirements of the problem and the desired trade-offs between time and space complexity.</p>\n</span>  </div>",
    "Python": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>eraseOverlapIntervals</code> function in Python:</p>\n<ol>\n<li>Using a simple loop:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   removed = 0\n   for i in range(len(intervals)):\n       for j in range(i+1, len(intervals)):\n           if intervals[i][1] &gt; intervals[j][0]:\n               removed += 1\n               intervals[j][0] = intervals[i][1]\n   return removed\n</code></pre>\n<ol start=\"2\">\n<li>Using a priority queue:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>from queue import PriorityQueue\n\ndef eraseOverlapIntervals(intervals):\n   pq = PriorityQueue()\n   for interval in intervals:\n       pq.put(interval)\n   removed = 0\n   while not pq.empty():\n       curr = pq.get()\n       if curr[1] &gt; pq.queue[0][0]:\n           removed += 1\n           pq.queue[0][0] = curr[1]\n   return removed\n</code></pre>\n<ol start=\"3\">\n<li>Using a sorting algorithm:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   intervals.sort(key=lambda x: x[0])\n   removed = 0\n   for i in range(len(intervals)):\n       if intervals[i][1] &gt; intervals[i+1][0]:\n           removed += 1\n           intervals[i+1][0] = intervals[i][1]\n   return removed\n</code></pre>\n<ol start=\"4\">\n<li>Using a divide and conquer approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   if len(intervals) == 1:\n       return 0\n   mid = len(intervals) // 2\n   left = intervals[:mid]\n   right = intervals[mid:]\n   left_removed = eraseOverlapIntervals(left)\n   right_removed = eraseOverlapIntervals(right)\n   return left_removed + right_removed\n</code></pre>\n<ol start=\"5\">\n<li>Using a greedy approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   removed = 0\n   for i in range(len(intervals)):\n       for j in range(i+1, len(intervals)):\n           if intervals[i][1] &gt; intervals[j][0]:\n               removed += 1\n               intervals[j][0] = intervals[i][1]\n   return removed\n</code></pre>\n<ol start=\"6\">\n<li>Using a dynamic programming approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   dp = [0] * (len(intervals) + 1)\n   for i in range(len(intervals)):\n       for j in range(i+1, len(intervals)):\n           if intervals[i][1] &gt; intervals[j][0]:\n               dp[j] = max(dp[j], dp[i] + 1)\n   return dp[-1]\n</code></pre>\n<ol start=\"7\">\n<li>Using a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   removed = 0\n   seen = set()\n   for interval in intervals:\n       if interval[1] in seen:\n           removed += 1\n       else:\n           seen.add(interval[1])\n   return removed\n</code></pre>\n<ol start=\"8\">\n<li>Using a tree data structure:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>from anytree import Node, RenderTree\n\ndef eraseOverlapIntervals(intervals):\n   root = Node(\"root\")\n   for interval in intervals:\n       root.add_child(Node(interval))\n   removed = 0\n   for node in root.children:\n       if node.interval[1] &gt; node.parent.interval[0]:\n           removed += 1\n           node.parent.interval[0] = node.interval[1]\n   return removed\n</code></pre>\n<ol start=\"9\">\n<li>Using a graph data structure:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>from graph import Graph\n\ndef eraseOverlapIntervals(intervals):\n   g = Graph()\n   for interval in intervals:\n       g.add_node(interval)\n   removed = 0\n   for node in g.nodes:\n       if node.interval[1] &gt; node.parent.interval[0]:\n           removed += 1\n           node.parent.interval[0] = node.interval[1]\n   return removed\n</code></pre>\n<ol start=\"10\">\n<li>Using a recursive approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def eraseOverlapIntervals(intervals):\n   if len(intervals) == 1:\n       return 0\n   mid = len(intervals) // 2\n   left = intervals[:mid]\n   right = intervals[mid:]\n   left_removed = eraseOverlapIntervals(left)\n   right_removed = eraseOverlapIntervals(right)\n   return left_removed + right_removed\n</code></pre>\n<p>Note that these are just some examples of possible implementations, and there may be other ways to solve the problem as well.</p>\n</span>  </div>",
    "JavaScript": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>eraseOverlapIntervals</code> function in JavaScript:</p>\n<ol>\n<li>Using a brute force approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> intervals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>Using a sorting approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   intervals<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> intervals<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\">\n<li>Using a greedy approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   intervals<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> intervals<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"4\">\n<li>Using a divide and conquer approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> leftRemoved <span class=\"token operator\">=</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> rightRemoved <span class=\"token operator\">=</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> leftRemoved <span class=\"token operator\">+</span> rightRemoved<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"5\">\n<li>Using a dynamic programming approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> intervals<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"6\">\n<li>Using a binary search approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   intervals<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> intervals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"7\">\n<li>Using a hash table approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       hash<span class=\"token punctuation\">[</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">[</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"8\">\n<li>Using a tree data structure approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"9\">\n<li>Using a graph data structure approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       graph<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       graph<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"10\">\n<li>Using a combination of sorting and binary search approach:</li>\n</ol>\n<pre><code class=\"language-javascript\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button><span class=\"token keyword\">function</span> <span class=\"token function\">eraseOverlapIntervals</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">intervals</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   intervals<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> removed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> intervals<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           removed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Note that these are just some examples of possible implementations, and there may be other ways to solve the problem as well.</p>\n</span>  </div>"
}