{
    "Java": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>maxEnvelopes</code> function in Java:</p>\n<ol>\n<li>Brute Force:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = i + 1; j &lt; envelopes.length; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Sorting:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   Arrays.sort(envelopes, (a, b) -&gt; a[0] - b[0]);\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = i + 1; j &lt; envelopes.length; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Greedy:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   Arrays.sort(envelopes, (a, b) -&gt; a[0] - b[0]);\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = i + 1; j &lt; envelopes.length; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n               break;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"4\">\n<li>Dynamic Programming:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   int[] dp = new int[envelopes.length];\n   Arrays.sort(envelopes, (a, b) -&gt; a[0] - b[0]);\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = 0; j &lt; i; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               dp[i] = Math.max(dp[i], dp[j] + 1);\n           }\n       }\n   }\n   return dp[envelopes.length - 1];\n}\n</code></pre>\n<ol start=\"5\">\n<li>Binary Search:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   Arrays.sort(envelopes, (a, b) -&gt; a[0] - b[0]);\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       int lo = 0, hi = envelopes.length - 1;\n       while (lo &lt;= hi) {\n           int mid = (lo + hi) / 2;\n           if (envelopes[i][0] &lt; envelopes[mid][0] &amp;&amp; envelopes[i][1] &lt; envelopes[mid][1]) {\n               max++;\n               break;\n           }\n           if (envelopes[i][0] &lt; envelopes[mid][0]) {\n               hi = mid - 1;\n           } else {\n               lo = mid + 1;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"6\">\n<li>Hash Table:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n   for (int[] envelope : envelopes) {\n       map.put(envelope[0], map.getOrDefault(envelope[0], 0) + 1);\n   }\n   int max = 0;\n   for (int[] envelope : envelopes) {\n       if (map.containsKey(envelope[0] - 1)) {\n           max++;\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"7\">\n<li>Bit Manipulation:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = i + 1; j &lt; envelopes.length; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"8\">\n<li>Recursion:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   return maxEnvelopes(envelopes, 0);\n}\n\nprivate int maxEnvelopes(int[][] envelopes, int index) {\n   if (index &gt;= envelopes.length) {\n       return 0;\n   }\n   int max = 0;\n   for (int i = index + 1; i &lt; envelopes.length; i++) {\n       if (envelopes[index][0] &lt; envelopes[i][0] &amp;&amp; envelopes[index][1] &lt; envelopes[i][1]) {\n           max++;\n       }\n   }\n   return max + maxEnvelopes(envelopes, index + 1);\n}\n</code></pre>\n<ol start=\"9\">\n<li>Backtracking:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   int max = 0;\n   for (int i = 0; i &lt; envelopes.length; i++) {\n       for (int j = i + 1; j &lt; envelopes.length; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n           }\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"10\">\n<li>Divide and Conquer:</li>\n</ol>\n<pre><code class=\"language-java\"><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>public int maxEnvelopes(int[][] envelopes) {\n   return maxEnvelopes(envelopes, 0, envelopes.length - 1);\n}\n\nprivate int maxEnvelopes(int[][] envelopes, int lo, int hi) {\n   if (lo &gt; hi) {\n       return 0;\n   }\n   int mid = (lo + hi) / 2;\n   int left = maxEnvelopes(envelopes, lo, mid - 1);\n   int right = maxEnvelopes(envelopes, mid + 1, hi);\n   int max = 0;\n   for (int i = lo; i &lt;= mid; i++) {\n       for (int j = mid + 1; j &lt;= hi; j++) {\n           if (envelopes[i][0] &lt; envelopes[j][0] &amp;&amp; envelopes[i][1] &lt; envelopes[j][1]) {\n               max++;\n           }\n       }\n   }\n   return max + left + right;\n}\n</code></pre>\n<p>Note: These are just some examples of possible implementations, and there may be other ways to solve the problem as well.</p>\n</span>  </div>",
    "Python": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>maxEnvelopes</code> function in Python:</p>\n<ol>\n<li>Brute force approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   max_envelopes = 0\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               max_envelopes += 1\n   return max_envelopes\n</code></pre>\n<ol start=\"2\">\n<li>Sorting and iterating:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   envelopes.sort(key=lambda x: x[0])\n   max_envelopes = 0\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               max_envelopes += 1\n   return max_envelopes\n</code></pre>\n<ol start=\"3\">\n<li>Dynamic programming:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   dp = [0] * len(envelopes)\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               dp[i] += 1\n   return max(dp)\n</code></pre>\n<ol start=\"4\">\n<li>Greedy approach:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   envelopes.sort(key=lambda x: x[0])\n   max_envelopes = 0\n   for i in range(len(envelopes)):\n       if envelopes[i][0] &gt; max_envelopes[0]:\n           max_envelopes = envelopes[i]\n   return max_envelopes\n</code></pre>\n<ol start=\"5\">\n<li>Binary search:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   envelopes.sort(key=lambda x: x[0])\n   max_envelopes = 0\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               max_envelopes += 1\n   return max_envelopes\n</code></pre>\n<ol start=\"6\">\n<li>Divide and conquer:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   if len(envelopes) == 1:\n       return envelopes[0]\n   mid = len(envelopes) // 2\n   left = maxEnvelopes(envelopes[:mid])\n   right = maxEnvelopes(envelopes[mid:])\n   return left + right\n</code></pre>\n<ol start=\"7\">\n<li>Recursion:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   if len(envelopes) == 1:\n       return envelopes[0]\n   mid = len(envelopes) // 2\n   left = maxEnvelopes(envelopes[:mid])\n   right = maxEnvelopes(envelopes[mid:])\n   return left + right\n</code></pre>\n<ol start=\"8\">\n<li>Memoization:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   memo = {}\n   for i in range(len(envelopes)):\n       memo[i] = 0\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               memo[i] += 1\n   return max(memo.values())\n</code></pre>\n<ol start=\"9\">\n<li>Tabulation:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   tab = [0] * len(envelopes)\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               tab[i] += 1\n   return max(tab)\n</code></pre>\n<ol start=\"10\">\n<li>Backtracking:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>def maxEnvelopes(envelopes):\n   max_envelopes = 0\n   for i in range(len(envelopes)):\n       for j in range(i+1, len(envelopes)):\n           if envelopes[i][0] &lt; envelopes[j][0] and envelopes[i][1] &lt; envelopes[j][1]:\n               max_envelopes += 1\n   return max_envelopes\n</code></pre>\n<p>Note: These are just examples and there may be other ways to solve the problem.</p>\n</span>  </div>",
    "JavaScript": "<div data-testid=\"bot\" class=\"message bot svelte-1fzvtqo latest\" dir=\"ltr\"><span class=\"svelte-15hifvz\"><p>Here are 10 possible implementations of the <code>maxEnvelopes</code> function in JavaScript:</p>\n<ol>\n<li>Using a simple for loop and a hash table:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const hash = {};\n   let max = 0;\n   for (const [width, height] of envelopes) {\n       if (!hash[width]) {\n           hash[width] = height;\n       } else if (hash[width] &lt; height) {\n           hash[width] = height;\n       }\n       max = Math.max(max, hash[width]);\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Using a for loop and a sorted array:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       if (width &gt; max) {\n           max = height;\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Using a for loop and a binary search:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       const index = binarySearch(sorted, width);\n       if (index &gt; -1) {\n           max = Math.max(max, height);\n       }\n   }\n   return max;\n}\n\nfunction binarySearch(arr, target) {\n   let left = 0;\n   let right = arr.length - 1;\n   while (left &lt;= right) {\n       const mid = (left + right) &gt;&gt;&gt; 1;\n       if (arr[mid][0] === target) {\n           return mid;\n       } else if (arr[mid][0] &lt; target) {\n           left = mid + 1;\n       } else {\n           right = mid - 1;\n       }\n   }\n   return -1;\n}\n</code></pre>\n<ol start=\"4\">\n<li>Using a for loop and a recursive function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   let max = 0;\n   for (const [width, height] of sorted) {\n       max = Math.max(max, height);\n       const index = sorted.indexOf(width);\n       if (index &gt; -1) {\n           max = Math.max(max, height);\n       }\n   }\n   return max;\n}\n</code></pre>\n<ol start=\"5\">\n<li>Using a for loop and a reduce function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   return sorted.reduce((max, [width, height]) =&gt; Math.max(max, height), 0);\n}\n</code></pre>\n<ol start=\"6\">\n<li>Using a for loop and a map function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   const map = new Map();\n   for (const [width, height] of sorted) {\n       map.set(width, height);\n   }\n   return Math.max(...map.values());\n}\n</code></pre>\n<ol start=\"7\">\n<li>Using a for loop and a set function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   const set = new Set();\n   for (const [width, height] of sorted) {\n       set.add(width);\n   }\n   return Math.max(...set.values());\n}\n</code></pre>\n<ol start=\"8\">\n<li>Using a for loop and a filter function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   const filtered = sorted.filter(([width, height]) =&gt; width &gt; height);\n   return Math.max(...filtered.map(([width, height]) =&gt; height));\n}\n</code></pre>\n<ol start=\"9\">\n<li>Using a for loop and a find function:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   const found = sorted.find(([width, height]) =&gt; width &gt; height);\n   return found ? found[1] : 0;\n}\n</code></pre>\n<ol start=\"10\">\n<li>Using a for loop and a reduce function with a callback:</li>\n</ol>\n<pre><code><button class=\"copy_code_button\" title=\"copy\">\n<span class=\"copy-text\"><svg viewBox=\"0 0 32 32\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\" fill=\"currentColor\"></path><path d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\" fill=\"currentColor\"></path></svg></span>\n<span class=\"check\"><svg stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg></span>\n</button>function maxEnvelopes(envelopes) {\n   const sorted = envelopes.sort((a, b) =&gt; a[0] - b[0]);\n   return sorted.reduce((max, [width, height]) =&gt; Math.max(max, height), 0);\n}\n</code></pre>\n<p>Note that these implementations are just examples and may not be the most efficient or the most readable. The best implementation will depend on the specific requirements of your use case.</p>\n</span>  </div>"
}